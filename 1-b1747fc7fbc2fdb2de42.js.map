{"version":3,"sources":["webpack:///./node_modules/react-measure/dist/index.esm.js","webpack:///./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"],"names":["__webpack_require__","d","__webpack_exports__","withContentRect","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_4__","prop_types__WEBPACK_IMPORTED_MODULE_4___default","n","resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_5__","types","getTypes","props","allowedTypes","forEach","type","push","getContentRect","node","calculations","indexOf","client","top","clientTop","left","clientLeft","width","clientWidth","height","clientHeight","offset","offsetTop","offsetLeft","offsetWidth","offsetHeight","scroll","scrollTop","scrollLeft","scrollWidth","scrollHeight","rect","getBoundingClientRect","bounds","right","bottom","styles","getComputedStyle","margin","parseInt","marginTop","marginRight","marginBottom","marginLeft","WrappedComponent","_class","_temp","_Component","WithContentRect","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","state","contentRect","entry","_animationFrameID","_resizeObserver","_node","_firstResize","measure","entries","window","requestAnimationFrame","setState","onResize","_handleRef","unobserve","observe","innerRef","current","Object","_proto","prototype","componentDidMount","componentWillUnmount","disconnect","cancelAnimationFrame","render","_this$props","measureRef","propTypes","a","bool","oneOfType","object","func","Measure","_ref","children","displayName","global","MapShim","Map","getIndex","arr","key","result","some","index","class_1","__entries__","defineProperty","get","enumerable","configurable","set","value","delete","splice","has","clear","callback","ctx","_i","_a","isBrowser","document","global$1","Math","self","Function","requestAnimationFrame$1","bind","setTimeout","Date","now","trailingTimeout","REFRESH_DELAY","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","throttle","addObserver","observer","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","attributes","childList","characterData","subtree","removeEventListener","_b","propertyName","getInstance","instance_","defineConfigurable","target","keys","writable","getWindowOf","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","positions","reduce","size","position","getHTMLElementContentRect","paddings","positions_1","getPaddings","horizPad","vertPad","boxSizing","round","documentElement","isDocumentElement","vertScrollbar","horizScrollbar","abs","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","bbox","getSVGContentRect","x","y","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","broadcastRect","ResizeObserverEntry","rectInit","Constr","DOMRectReadOnly","create","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","TypeError","callback_","controller_","callbackCtx_","Element","observations","clearActive","observation","map","WeakMap","ResizeObserver","method"],"mappings":"0FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,IAAAK,EAAAL,EAAA,IAAAM,EAAAN,EAAA,KAAAO,EAAAP,EAAA,GAAAQ,EAAAR,EAAA,GAAAS,EAAAT,EAAAU,EAAAF,GAAAG,EAAAX,EAAA,KAMAY,EAAA,+CAEA,SAAAC,EAAAC,GACA,IAAAC,EAAA,GAMA,OALAH,EAAAI,QAAA,SAAAC,GACAH,EAAAG,IACAF,EAAAG,KAAAD,KAGAF,EAGA,SAAAI,EAAAC,EAAAR,GACA,IAAAS,EAAA,GA6BA,GA3BAT,EAAAU,QAAA,eACAD,EAAAE,OAAA,CACAC,IAAAJ,EAAAK,UACAC,KAAAN,EAAAO,WACAC,MAAAR,EAAAS,YACAC,OAAAV,EAAAW,eAIAnB,EAAAU,QAAA,eACAD,EAAAW,OAAA,CACAR,IAAAJ,EAAAa,UACAP,KAAAN,EAAAc,WACAN,MAAAR,EAAAe,YACAL,OAAAV,EAAAgB,eAIAxB,EAAAU,QAAA,eACAD,EAAAgB,OAAA,CACAb,IAAAJ,EAAAkB,UACAZ,KAAAN,EAAAmB,WACAX,MAAAR,EAAAoB,YACAV,OAAAV,EAAAqB,eAIA7B,EAAAU,QAAA,cACA,IAAAoB,EAAAtB,EAAAuB,wBACAtB,EAAAuB,OAAA,CACApB,IAAAkB,EAAAlB,IACAqB,MAAAH,EAAAG,MACAC,OAAAJ,EAAAI,OACApB,KAAAgB,EAAAhB,KACAE,MAAAc,EAAAd,MACAE,OAAAY,EAAAZ,QAIA,GAAAlB,EAAAU,QAAA,cACA,IAAAyB,EAAAC,iBAAA5B,GACAC,EAAA4B,OAAA,CACAzB,IAAAuB,EAAAG,SAAAH,EAAAI,WAAA,EACAN,MAAAE,EAAAG,SAAAH,EAAAK,aAAA,EACAN,OAAAC,EAAAG,SAAAH,EAAAM,cAAA,EACA3B,KAAAqB,EAAAG,SAAAH,EAAAO,YAAA,GAIA,OAAAjC,EAGA,SAAAlB,EAAAS,GACA,gBAAA2C,GACA,IAAAC,EAAAC,EAEA,OAAAA,EAAAD,EAEA,SAAAE,GAGA,SAAAC,IAGA,IAFA,IAAAC,EAEAC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAA2EA,EAAAL,EAAaK,IACxFF,EAAAE,GAAAJ,UAAAI,GA+DA,OA5DAN,EAAAF,EAAAS,KAAAC,MAAAV,EAAA,CAAAW,MAAAC,OAAAN,KAAAK,MACAE,MAAA,CACAC,YAAA,CACAC,MAAA,GACAlD,OAAA,GACAS,OAAA,GACAK,OAAA,GACAO,OAAA,GACAK,OAAA,KAGAW,EAAAc,kBAAA,KACAd,EAAAe,gBAAA,KACAf,EAAAgB,MAAA,KACAhB,EAAAiB,cAAA,EAEAjB,EAAAkB,QAAA,SAAAC,GACA,IAAAP,EAAArD,EAAAyC,EAAAgB,MAAAhE,GAAAC,EAAA+C,EAAA9C,QAEAiE,IACAP,EAAAC,MAAAM,EAAA,GAAAP,aAGAZ,EAAAc,kBAAAM,OAAAC,sBAAA,WACA,OAAArB,EAAAe,iBAAAf,EAAAiB,eACAjB,EAAAsB,SAAA,CACAV,gBAGA,mBAAAZ,EAAA9C,MAAAqE,UACAvB,EAAA9C,MAAAqE,SAAAX,IAIAZ,EAAAiB,cAAA,KAIAjB,EAAAwB,WAAA,SAAAhE,GACA,OAAAwC,EAAAe,iBAAA,OAAAf,EAAAgB,OACAhB,EAAAe,gBAAAU,UAAAzB,EAAAgB,OAGAhB,EAAAgB,MAAAxD,EAEA,OAAAwC,EAAAe,iBAAA,OAAAf,EAAAgB,OACAhB,EAAAe,gBAAAW,QAAA1B,EAAAgB,OAGA,IAAAW,EAAA3B,EAAA9C,MAAAyE,SAEAA,IACA,mBAAAA,EACAA,EAAA3B,EAAAgB,OAEAW,EAAAC,QAAA5B,EAAAgB,QAKAhB,EArEM6B,OAAAnF,EAAA,EAAAmF,CAAc9B,EAAAD,GAwEpB,IAAAgC,EAAA/B,EAAAgC,UAqCA,OAnCAD,EAAAE,kBAAA,WACAvB,KAAAM,gBAAA,IAAmChE,EAAA,EAAc0D,KAAAS,SAEjD,OAAAT,KAAAO,QACAP,KAAAM,gBAAAW,QAAAjB,KAAAO,OAEA,mBAAAP,KAAAvD,MAAAqE,UACAd,KAAAvD,MAAAqE,SAAAhE,EAAAkD,KAAAO,MAAAhE,GAAAC,EAAAwD,KAAAvD,WAKA4E,EAAAG,qBAAA,WACA,OAAAxB,KAAAM,kBACAN,KAAAM,gBAAAmB,aAEAzB,KAAAM,gBAAA,MAGAK,OAAAe,qBAAA1B,KAAAK,oBAGAgB,EAAAM,OAAA,WACA,IAAAC,EAAA5B,KAAAvD,MAGAA,GAFAmF,EAAAV,SACAU,EAAAd,SACoBM,OAAApF,EAAA,EAAAoF,CAA6BQ,EAAA,0BAEjD,OAAeR,OAAAlF,EAAA,cAAAkF,CAAalC,EAAmBkC,OAAArF,EAAA,EAAAqF,CAAQ,GAAG3E,EAAA,CAC1DoF,WAAA7B,KAAAe,WACAN,QAAAT,KAAAS,QACAN,YAAAH,KAAAE,MAAAC,gBAIAb,EA9GA,CA+GMpD,EAAA,WAASiD,EAAA2C,UAAA,CACf5E,OAAcd,EAAA2F,EAASC,KACvBrE,OAAcvB,EAAA2F,EAASC,KACvBhE,OAAc5B,EAAA2F,EAASC,KACvBzD,OAAcnC,EAAA2F,EAASC,KACvBpD,OAAcxC,EAAA2F,EAASC,KACvBd,SAAgB9E,EAAA2F,EAASE,UAAA,CAAY7F,EAAA2F,EAASG,OAAS9F,EAAA2F,EAASI,OAChErB,SAAgB1E,EAAA2F,EAASI,MACpB/C,GAIL,IAAAgD,EAAAtG,IAAA,SAAAuG,GACA,IAAA5B,EAAA4B,EAAA5B,QACAoB,EAAAQ,EAAAR,WACA1B,EAAAkC,EAAAlC,YAEA,OAAAmC,EADAD,EAAAC,UACA,CACA7B,UACAoB,aACA1B,kBAGAiC,EAAAG,YAAA,UACAH,EAAAN,UAAAQ,SAA6BlG,EAAA2F,EAASI,KACvBtG,EAAA,uCCvNf,SAAA2G,GAAA7G,EAAA,KAAAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,QAgBA8G,EAAA,WACA,uBAAAC,IACA,OAAAA,IAWA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,GAAA,EASA,OARAF,EAAAG,KAAA,SAAA3C,EAAA4C,GACA,OAAA5C,EAAA,KAAAyC,IACAC,EAAAE,GACA,KAKAF,EAGA,OAEA,WACA,SAAAG,IACAjD,KAAAkD,YAAA,GAwFA,OArFA9B,OAAA+B,eAAAF,EAAA3B,UAAA,QAIA8B,IAAA,WACA,OAAApD,KAAAkD,YAAAxD,QAEA2D,YAAA,EACAC,cAAA,IAOAL,EAAA3B,UAAA8B,IAAA,SAAAP,GACA,IAAAG,EAAAL,EAAA3C,KAAAkD,YAAAL,GACAzC,EAAAJ,KAAAkD,YAAAF,GACA,OAAA5C,KAAA,IASA6C,EAAA3B,UAAAiC,IAAA,SAAAV,EAAAW,GACA,IAAAR,EAAAL,EAAA3C,KAAAkD,YAAAL,IAEAG,EACAhD,KAAAkD,YAAAF,GAAA,GAAAQ,EAEAxD,KAAAkD,YAAArG,KAAA,CAAAgG,EAAAW,KASAP,EAAA3B,UAAAmC,OAAA,SAAAZ,GACA,IAAAnC,EAAAV,KAAAkD,YACAF,EAAAL,EAAAjC,EAAAmC,IAEAG,GACAtC,EAAAgD,OAAAV,EAAA,IASAC,EAAA3B,UAAAqC,IAAA,SAAAd,GACA,SAAAF,EAAA3C,KAAAkD,YAAAL,IAOAI,EAAA3B,UAAAsC,MAAA,WACA5D,KAAAkD,YAAAQ,OAAA,IASAT,EAAA3B,UAAA3E,QAAA,SAAAkH,EAAAC,QACA,IAAAA,IACAA,EAAA,MAGA,QAAAC,EAAA,EAAAC,EAAAhE,KAAAkD,YAA+Ca,EAAAC,EAAAtE,OAAgBqE,IAAA,CAC/D,IAAA3D,EAAA4D,EAAAD,GACAF,EAAA/D,KAAAgE,EAAA1D,EAAA,GAAAA,EAAA,MAIA6C,EA5FA,GA1BA,GA+HAgB,EAAA,oBAAAtD,QAAA,oBAAAuD,UAAAvD,OAAAuD,oBAEAC,OACA,IAAA3B,KAAA4B,YACA5B,EAGA,oBAAA6B,WAAAD,YACAC,KAGA,oBAAA1D,eAAAyD,YACAzD,OAIA2D,SAAA,cAAAA,GAUAC,EACA,mBAAA3D,sBAIAA,sBAAA4D,KAAAL,GAGA,SAAAN,GACA,OAAAY,WAAA,WACA,OAAAZ,EAAAa,KAAAC,QACK,SAKLC,EAAA,EA6EA,IAAAC,EAAA,GAGAC,EAAA,iEAEAC,EAAA,oBAAAC,iBAKAC,EAEA,WAMA,SAAAA,IAMAjF,KAAAkF,YAAA,EAOAlF,KAAAmF,sBAAA,EAOAnF,KAAAoF,mBAAA,KAOApF,KAAAqF,WAAA,GACArF,KAAAsF,iBAAAtF,KAAAsF,iBAAAd,KAAAxE,MACAA,KAAAuF,QAlHA,SAAA1B,EAAA2B,GACA,IAAAC,GAAA,EACAC,GAAA,EACAC,EAAA,EAQA,SAAAC,IACAH,IACAA,GAAA,EACA5B,KAGA6B,GACAG,IAYA,SAAAC,IACAvB,EAAAqB,GASA,SAAAC,IACA,IAAAE,EAAArB,KAAAC,MAEA,GAAAc,EAAA,CAEA,GAAAM,EAAAJ,EAAAf,EACA,OAOAc,GAAA,OAEAD,GAAA,EACAC,GAAA,EACAjB,WAAAqB,EAAAN,GAGAG,EAAAI,EAGA,OAAAF,EAmDAG,CAAAhG,KAAAuF,QAAAf,KAAAxE,MAAA6E,GA+LA,OArLAI,EAAA3D,UAAA2E,YAAA,SAAAC,IACAlG,KAAAqF,WAAApI,QAAAiJ,IACAlG,KAAAqF,WAAAxI,KAAAqJ,GAIAlG,KAAAkF,YACAlF,KAAAmG,YAWAlB,EAAA3D,UAAA8E,eAAA,SAAAF,GACA,IAAAG,EAAArG,KAAAqF,WACArC,EAAAqD,EAAApJ,QAAAiJ,IAEAlD,GACAqD,EAAA3C,OAAAV,EAAA,IAIAqD,EAAA3G,QAAAM,KAAAkF,YACAlF,KAAAsG,eAWArB,EAAA3D,UAAAiE,QAAA,WACAvF,KAAAuG,oBAIAvG,KAAAuF,WAaAN,EAAA3D,UAAAiF,iBAAA,WAEA,IAAAC,EAAAxG,KAAAqF,WAAAoB,OAAA,SAAAP,GACA,OAAAA,EAAAQ,eAAAR,EAAAS,cAUA,OAHAH,EAAA7J,QAAA,SAAAuJ,GACA,OAAAA,EAAAU,oBAEAJ,EAAA9G,OAAA,GAUAuF,EAAA3D,UAAA6E,SAAA,WAGAlC,IAAAjE,KAAAkF,aAOAhB,SAAA2C,iBAAA,gBAAA7G,KAAAsF,kBACA3E,OAAAkG,iBAAA,SAAA7G,KAAAuF,SAEAR,GACA/E,KAAAoF,mBAAA,IAAAJ,iBAAAhF,KAAAuF,SACAvF,KAAAoF,mBAAAnE,QAAAiD,SAAA,CACA4C,YAAA,EACAC,WAAA,EACAC,eAAA,EACAC,SAAA,MAGA/C,SAAA2C,iBAAA,qBAAA7G,KAAAuF,SACAvF,KAAAmF,sBAAA,GAGAnF,KAAAkF,YAAA,IAUAD,EAAA3D,UAAAgF,YAAA,WAGArC,GAAAjE,KAAAkF,aAIAhB,SAAAgD,oBAAA,gBAAAlH,KAAAsF,kBACA3E,OAAAuG,oBAAA,SAAAlH,KAAAuF,SAEAvF,KAAAoF,oBACApF,KAAAoF,mBAAA3D,aAGAzB,KAAAmF,sBACAjB,SAAAgD,oBAAA,qBAAAlH,KAAAuF,SAGAvF,KAAAoF,mBAAA,KACApF,KAAAmF,sBAAA,EACAnF,KAAAkF,YAAA,IAWAD,EAAA3D,UAAAgE,iBAAA,SAAAtB,GACA,IAAAmD,EAAAnD,EAAAoD,aACAA,OAAA,IAAAD,EAAA,GAAAA,EAEArC,EAAA/B,KAAA,SAAAF,GACA,SAAAuE,EAAAnK,QAAA4F,MAIA7C,KAAAuF,WAUAN,EAAAoC,YAAA,WAKA,OAJArH,KAAAsH,YACAtH,KAAAsH,UAAA,IAAArC,GAGAjF,KAAAsH,WASArC,EAAAqC,UAAA,KACArC,EAlOA,GA6OAsC,EAAA,SAAAC,EAAA/K,GACA,QAAAsH,EAAA,EAAAC,EAAA5C,OAAAqG,KAAAhL,GAA2CsH,EAAAC,EAAAtE,OAAgBqE,IAAA,CAC3D,IAAAlB,EAAAmB,EAAAD,GACA3C,OAAA+B,eAAAqE,EAAA3E,EAAA,CACAW,MAAA/G,EAAAoG,GACAQ,YAAA,EACAqE,UAAA,EACApE,cAAA,IAIA,OAAAkE,GAUAG,EAAA,SAAAH,GAOA,OAHAA,KAAAI,eAAAJ,EAAAI,cAAAC,aAGA1D,GAIA2D,EAAAC,EAAA,SAQA,SAAAC,EAAAxE,GACA,OAAAyE,WAAAzE,IAAA,EAWA,SAAA0E,EAAAxJ,GAGA,IAFA,IAAAyJ,EAAA,GAEApE,EAAA,EAAkBA,EAAAtE,UAAAC,OAAuBqE,IACzCoE,EAAApE,EAAA,GAAAtE,UAAAsE,GAGA,OAAAoE,EAAAC,OAAA,SAAAC,EAAAC,GAEA,OAAAD,EAAAL,EADAtJ,EAAA,UAAA4J,EAAA,YAEG,GA2CH,SAAAC,EAAAf,GAGA,IAAAhK,EAAAgK,EAAAhK,YACAE,EAAA8J,EAAA9J,aASA,IAAAF,IAAAE,EACA,OAAAoK,EAGA,IAAApJ,EAAAiJ,EAAAH,GAAA7I,iBAAA6I,GACAgB,EAnDA,SAAA9J,GAIA,IAHA,IACA8J,EAAA,GAEAzE,EAAA,EAAA0E,EAHA,gCAG2C1E,EAAA0E,EAAA/I,OAAyBqE,IAAA,CACpE,IAAAuE,EAAAG,EAAA1E,GACAP,EAAA9E,EAAA,WAAA4J,GACAE,EAAAF,GAAAN,EAAAxE,GAGA,OAAAgF,EAyCAE,CAAAhK,GACAiK,EAAAH,EAAAnL,KAAAmL,EAAAhK,MACAoK,EAAAJ,EAAArL,IAAAqL,EAAA/J,OAKAlB,EAAAyK,EAAAtJ,EAAAnB,OACAE,EAAAuK,EAAAtJ,EAAAjB,QAuBA,GApBA,eAAAiB,EAAAmK,YAOAzE,KAAA0E,MAAAvL,EAAAoL,KAAAnL,IACAD,GAAA2K,EAAAxJ,EAAA,gBAAAiK,GAGAvE,KAAA0E,MAAArL,EAAAmL,KAAAlL,IACAD,GAAAyK,EAAAxJ,EAAA,gBAAAkK,KA+DA,SAAApB,GACA,OAAAA,IAAAG,EAAAH,GAAAtD,SAAA6E,gBAxDAC,CAAAxB,GAAA,CAKA,IAAAyB,EAAA7E,KAAA0E,MAAAvL,EAAAoL,GAAAnL,EACA0L,EAAA9E,KAAA0E,MAAArL,EAAAmL,GAAAlL,EAMA,IAAA0G,KAAA+E,IAAAF,KACA1L,GAAA0L,GAGA,IAAA7E,KAAA+E,IAAAD,KACAzL,GAAAyL,GAIA,OAAAnB,EAAAS,EAAAnL,KAAAmL,EAAArL,IAAAI,EAAAE,GAUA,IAAA2L,EAGA,oBAAAC,mBACA,SAAA7B,GACA,OAAAA,aAAAG,EAAAH,GAAA6B,oBAOA,SAAA7B,GACA,OAAAA,aAAAG,EAAAH,GAAA8B,YAAA,mBAAA9B,EAAA+B,SAsBA,SAAAzM,EAAA0K,GACA,OAAAvD,EAIAmF,EAAA5B,GApIA,SAAAA,GACA,IAAAgC,EAAAhC,EAAA+B,UACA,OAAAxB,EAAA,IAAAyB,EAAAjM,MAAAiM,EAAA/L,QAmIAgM,CAAAjC,GAGAe,EAAAf,GAPAM,EAmDA,SAAAC,EAAA2B,EAAAC,EAAApM,EAAAE,GACA,OACAiM,IACAC,IACApM,QACAE,UASA,IAAAmM,EAEA,WAMA,SAAAA,EAAApC,GAMAxH,KAAA6J,eAAA,EAOA7J,KAAA8J,gBAAA,EAOA9J,KAAA+J,aAAAhC,EAAA,SACA/H,KAAAwH,SA8BA,OApBAoC,EAAAtI,UAAA0I,SAAA,WACA,IAAA3L,EAAAvB,EAAAkD,KAAAwH,QAEA,OADAxH,KAAA+J,aAAA1L,EACAA,EAAAd,QAAAyC,KAAA6J,gBAAAxL,EAAAZ,SAAAuC,KAAA8J,iBAUAF,EAAAtI,UAAA2I,cAAA,WACA,IAAA5L,EAAA2B,KAAA+J,aAGA,OAFA/J,KAAA6J,eAAAxL,EAAAd,MACAyC,KAAA8J,gBAAAzL,EAAAZ,OACAY,GAGAuL,EAzDA,GA4DAM,EAEA,WAqBA,OAdA,SAAA1C,EAAA2C,GACA,IAvHAnG,EACA0F,EACAC,EACApM,EACAE,EAEA2M,EACA/L,EAgHA8B,GAtHAuJ,GADA1F,EAuHAmG,GAtHAT,EACAC,EAAA3F,EAAA2F,EACApM,EAAAyG,EAAAzG,MACAE,EAAAuG,EAAAvG,OAEA2M,EAAA,oBAAAC,gCAAAjJ,OACA/C,EAAA+C,OAAAkJ,OAAAF,EAAA9I,WAEAiG,EAAAlJ,EAAA,CACAqL,IACAC,IACApM,QACAE,SACAN,IAAAwM,EACAnL,MAAAkL,EAAAnM,EACAkB,OAAAhB,EAAAkM,EACAtM,KAAAqM,IAEArL,GA2GAkJ,EAAAvH,KAAA,CACAwH,SACArH,iBAjBA,GAwBAoK,EAEA,WAWA,SAAAA,EAAA1G,EAAA2G,EAAAC,GAgBA,GATAzK,KAAA0K,oBAAA,GAOA1K,KAAA2K,cAAA,IAAAlI,EAEA,mBAAAoB,EACA,UAAA+G,UAAA,2DAGA5K,KAAA6K,UAAAhH,EACA7D,KAAA8K,YAAAN,EACAxK,KAAA+K,aAAAN,EA8IA,OApIAF,EAAAjJ,UAAAL,QAAA,SAAAuG,GACA,IAAA/H,UAAAC,OACA,UAAAkL,UAAA,4CAIA,uBAAAI,4BAAA5J,OAAA,CAIA,KAAAoG,aAAAG,EAAAH,GAAAwD,SACA,UAAAJ,UAAA,yCAGA,IAAAK,EAAAjL,KAAA2K,cAEAM,EAAAtH,IAAA6D,KAIAyD,EAAA1H,IAAAiE,EAAA,IAAAoC,EAAApC,IACAxH,KAAA8K,YAAA7E,YAAAjG,MAEAA,KAAA8K,YAAAvF,aAUAgF,EAAAjJ,UAAAN,UAAA,SAAAwG,GACA,IAAA/H,UAAAC,OACA,UAAAkL,UAAA,4CAIA,uBAAAI,4BAAA5J,OAAA,CAIA,KAAAoG,aAAAG,EAAAH,GAAAwD,SACA,UAAAJ,UAAA,yCAGA,IAAAK,EAAAjL,KAAA2K,cAEAM,EAAAtH,IAAA6D,KAIAyD,EAAAxH,OAAA+D,GAEAyD,EAAA5C,MACArI,KAAA8K,YAAA1E,eAAApG,SAUAuK,EAAAjJ,UAAAG,WAAA,WACAzB,KAAAkL,cACAlL,KAAA2K,cAAA/G,QACA5D,KAAA8K,YAAA1E,eAAApG,OAUAuK,EAAAjJ,UAAAoF,aAAA,WACA,IAAAnH,EAAAS,KAEAA,KAAAkL,cACAlL,KAAA2K,cAAAhO,QAAA,SAAAwO,GACAA,EAAAnB,YACAzK,EAAAmL,oBAAA7N,KAAAsO,MAYAZ,EAAAjJ,UAAAsF,gBAAA,WAEA,GAAA5G,KAAA2G,YAAA,CAIA,IAAA7C,EAAA9D,KAAA+K,aAEArK,EAAAV,KAAA0K,oBAAAU,IAAA,SAAAD,GACA,WAAAjB,EAAAiB,EAAA3D,OAAA2D,EAAAlB,mBAEAjK,KAAA6K,UAAA/K,KAAAgE,EAAApD,EAAAoD,GACA9D,KAAAkL,gBASAX,EAAAjJ,UAAA4J,YAAA,WACAlL,KAAA0K,oBAAAhH,OAAA,IASA6G,EAAAjJ,UAAAqF,UAAA,WACA,OAAA3G,KAAA0K,oBAAAhL,OAAA,GAGA6K,EA/KA,GAqLAlE,EAAA,oBAAAgF,QAAA,IAAAA,QAAA,IAAA5I,EAMA6I,EAEA,WAqBA,OAdA,SAAAA,EAAAzH,GACA,KAAA7D,gBAAAsL,GACA,UAAAV,UAAA,sCAGA,IAAAnL,UAAAC,OACA,UAAAkL,UAAA,4CAGA,IAAAJ,EAAAvF,EAAAoC,cACAnB,EAAA,IAAAqE,EAAA1G,EAAA2G,EAAAxK,MACAqG,EAAA9C,IAAAvD,KAAAkG,IAlBA,GAyBA,qCAAAvJ,QAAA,SAAA4O,GACAD,EAAAhK,UAAAiK,GAAA,WACA,IAAAvH,EAEA,OAAAA,EAAAqC,EAAAjD,IAAApD,OAAAuL,GAAAxL,MAAAiE,EAAAvE,cAIA,IAAAuD,OAEA,IAAAmB,EAAAmH,eACAnH,EAAAmH,eAGAA,EAGezP,EAAA","file":"1-b1747fc7fbc2fdb2de42.js","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport { Component, createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport ResizeObserver from 'resize-observer-polyfill';\nvar types = ['client', 'offset', 'scroll', 'bounds', 'margin'];\n\nfunction getTypes(props) {\n  var allowedTypes = [];\n  types.forEach(function (type) {\n    if (props[type]) {\n      allowedTypes.push(type);\n    }\n  });\n  return allowedTypes;\n}\n\nfunction getContentRect(node, types) {\n  var calculations = {};\n\n  if (types.indexOf('client') > -1) {\n    calculations.client = {\n      top: node.clientTop,\n      left: node.clientLeft,\n      width: node.clientWidth,\n      height: node.clientHeight\n    };\n  }\n\n  if (types.indexOf('offset') > -1) {\n    calculations.offset = {\n      top: node.offsetTop,\n      left: node.offsetLeft,\n      width: node.offsetWidth,\n      height: node.offsetHeight\n    };\n  }\n\n  if (types.indexOf('scroll') > -1) {\n    calculations.scroll = {\n      top: node.scrollTop,\n      left: node.scrollLeft,\n      width: node.scrollWidth,\n      height: node.scrollHeight\n    };\n  }\n\n  if (types.indexOf('bounds') > -1) {\n    var rect = node.getBoundingClientRect();\n    calculations.bounds = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.width,\n      height: rect.height\n    };\n  }\n\n  if (types.indexOf('margin') > -1) {\n    var styles = getComputedStyle(node);\n    calculations.margin = {\n      top: styles ? parseInt(styles.marginTop) : 0,\n      right: styles ? parseInt(styles.marginRight) : 0,\n      bottom: styles ? parseInt(styles.marginBottom) : 0,\n      left: styles ? parseInt(styles.marginLeft) : 0\n    };\n  }\n\n  return calculations;\n}\n\nfunction withContentRect(types) {\n  return function (WrappedComponent) {\n    var _class, _temp;\n\n    return _temp = _class =\n    /*#__PURE__*/\n    function (_Component) {\n      _inheritsLoose(WithContentRect, _Component);\n\n      function WithContentRect() {\n        var _this;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n        _this.state = {\n          contentRect: {\n            entry: {},\n            client: {},\n            offset: {},\n            scroll: {},\n            bounds: {},\n            margin: {}\n          }\n        };\n        _this._animationFrameID = null;\n        _this._resizeObserver = null;\n        _this._node = null;\n        _this._firstResize = true;\n\n        _this.measure = function (entries) {\n          var contentRect = getContentRect(_this._node, types || getTypes(_this.props));\n\n          if (entries) {\n            contentRect.entry = entries[0].contentRect;\n          }\n\n          _this._animationFrameID = window.requestAnimationFrame(function () {\n            if (_this._resizeObserver !== null && !_this._firstResize) {\n              _this.setState({\n                contentRect: contentRect\n              });\n\n              if (typeof _this.props.onResize === 'function') {\n                _this.props.onResize(contentRect);\n              }\n            }\n\n            _this._firstResize = false;\n          });\n        };\n\n        _this._handleRef = function (node) {\n          if (_this._resizeObserver !== null && _this._node !== null) {\n            _this._resizeObserver.unobserve(_this._node);\n          }\n\n          _this._node = node;\n\n          if (_this._resizeObserver !== null && _this._node !== null) {\n            _this._resizeObserver.observe(_this._node);\n          }\n\n          var innerRef = _this.props.innerRef;\n\n          if (innerRef) {\n            if (typeof innerRef === 'function') {\n              innerRef(_this._node);\n            } else {\n              innerRef.current = _this._node;\n            }\n          }\n        };\n\n        return _this;\n      }\n\n      var _proto = WithContentRect.prototype;\n\n      _proto.componentDidMount = function componentDidMount() {\n        this._resizeObserver = new ResizeObserver(this.measure);\n\n        if (this._node !== null) {\n          this._resizeObserver.observe(this._node);\n\n          if (typeof this.props.onResize === 'function') {\n            this.props.onResize(getContentRect(this._node, types || getTypes(this.props)));\n          }\n        }\n      };\n\n      _proto.componentWillUnmount = function componentWillUnmount() {\n        if (this._resizeObserver !== null) {\n          this._resizeObserver.disconnect();\n\n          this._resizeObserver = null;\n        }\n\n        window.cancelAnimationFrame(this._animationFrameID);\n      };\n\n      _proto.render = function render() {\n        var _this$props = this.props,\n            innerRef = _this$props.innerRef,\n            onResize = _this$props.onResize,\n            props = _objectWithoutPropertiesLoose(_this$props, [\"innerRef\", \"onResize\"]);\n\n        return createElement(WrappedComponent, _extends({}, props, {\n          measureRef: this._handleRef,\n          measure: this.measure,\n          contentRect: this.state.contentRect\n        }));\n      };\n\n      return WithContentRect;\n    }(Component), _class.propTypes = {\n      client: PropTypes.bool,\n      offset: PropTypes.bool,\n      scroll: PropTypes.bool,\n      bounds: PropTypes.bool,\n      margin: PropTypes.bool,\n      innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n      onResize: PropTypes.func\n    }, _temp;\n  };\n}\n\nvar Measure = withContentRect()(function (_ref) {\n  var measure = _ref.measure,\n      measureRef = _ref.measureRef,\n      contentRect = _ref.contentRect,\n      children = _ref.children;\n  return children({\n    measure: measure,\n    measureRef: measureRef,\n    contentRect: contentRect\n  });\n});\nMeasure.displayName = 'Measure';\nMeasure.propTypes.children = PropTypes.func;\nexport default Measure;\nexport { withContentRect };","import \"core-js/modules/es6.weak-map\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\n\n/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\n\n/* eslint-disable require-jsdoc, valid-jsdoc */\nvar MapShim = function () {\n  if (typeof Map !== 'undefined') {\n    return Map;\n  }\n  /**\r\n   * Returns index in provided array that matches the specified key.\r\n   *\r\n   * @param {Array<Array>} arr\r\n   * @param {*} key\r\n   * @returns {number}\r\n   */\n\n\n  function getIndex(arr, key) {\n    var result = -1;\n    arr.some(function (entry, index) {\n      if (entry[0] === key) {\n        result = index;\n        return true;\n      }\n\n      return false;\n    });\n    return result;\n  }\n\n  return (\n    /** @class */\n    function () {\n      function class_1() {\n        this.__entries__ = [];\n      }\n\n      Object.defineProperty(class_1.prototype, \"size\", {\n        /**\r\n         * @returns {boolean}\r\n         */\n        get: function get() {\n          return this.__entries__.length;\n        },\n        enumerable: true,\n        configurable: true\n      });\n      /**\r\n       * @param {*} key\r\n       * @returns {*}\r\n       */\n\n      class_1.prototype.get = function (key) {\n        var index = getIndex(this.__entries__, key);\n        var entry = this.__entries__[index];\n        return entry && entry[1];\n      };\n      /**\r\n       * @param {*} key\r\n       * @param {*} value\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.set = function (key, value) {\n        var index = getIndex(this.__entries__, key);\n\n        if (~index) {\n          this.__entries__[index][1] = value;\n        } else {\n          this.__entries__.push([key, value]);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.delete = function (key) {\n        var entries = this.__entries__;\n        var index = getIndex(entries, key);\n\n        if (~index) {\n          entries.splice(index, 1);\n        }\n      };\n      /**\r\n       * @param {*} key\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.has = function (key) {\n        return !!~getIndex(this.__entries__, key);\n      };\n      /**\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.clear = function () {\n        this.__entries__.splice(0);\n      };\n      /**\r\n       * @param {Function} callback\r\n       * @param {*} [ctx=null]\r\n       * @returns {void}\r\n       */\n\n\n      class_1.prototype.forEach = function (callback, ctx) {\n        if (ctx === void 0) {\n          ctx = null;\n        }\n\n        for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\n          var entry = _a[_i];\n          callback.call(ctx, entry[1], entry[0]);\n        }\n      };\n\n      return class_1;\n    }()\n  );\n}();\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\n\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.\n\nvar global$1 = function () {\n  if (typeof global !== 'undefined' && global.Math === Math) {\n    return global;\n  }\n\n  if (typeof self !== 'undefined' && self.Math === Math) {\n    return self;\n  }\n\n  if (typeof window !== 'undefined' && window.Math === Math) {\n    return window;\n  } // eslint-disable-next-line no-new-func\n\n\n  return Function('return this')();\n}();\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\n\n\nvar requestAnimationFrame$1 = function () {\n  if (typeof requestAnimationFrame === 'function') {\n    // It's required to use a bounded function because IE sometimes throws\n    // an \"Invalid calling object\" error if rAF is invoked without the global\n    // object on the left hand side.\n    return requestAnimationFrame.bind(global$1);\n  }\n\n  return function (callback) {\n    return setTimeout(function () {\n      return callback(Date.now());\n    }, 1000 / 60);\n  };\n}(); // Defines minimum timeout before adding a trailing call.\n\n\nvar trailingTimeout = 2;\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\n\nfunction throttle(callback, delay) {\n  var leadingCall = false,\n      trailingCall = false,\n      lastCallTime = 0;\n  /**\r\n   * Invokes the original callback function and schedules new invocation if\r\n   * the \"proxy\" was called during current request.\r\n   *\r\n   * @returns {void}\r\n   */\n\n  function resolvePending() {\n    if (leadingCall) {\n      leadingCall = false;\n      callback();\n    }\n\n    if (trailingCall) {\n      proxy();\n    }\n  }\n  /**\r\n   * Callback invoked after the specified delay. It will further postpone\r\n   * invocation of the original function delegating it to the\r\n   * requestAnimationFrame.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function timeoutCallback() {\n    requestAnimationFrame$1(resolvePending);\n  }\n  /**\r\n   * Schedules invocation of the original function.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  function proxy() {\n    var timeStamp = Date.now();\n\n    if (leadingCall) {\n      // Reject immediately following calls.\n      if (timeStamp - lastCallTime < trailingTimeout) {\n        return;\n      } // Schedule new call to be in invoked when the pending one is resolved.\n      // This is important for \"transitions\" which never actually start\n      // immediately so there is a chance that we might miss one if change\n      // happens amids the pending invocation.\n\n\n      trailingCall = true;\n    } else {\n      leadingCall = true;\n      trailingCall = false;\n      setTimeout(timeoutCallback, delay);\n    }\n\n    lastCallTime = timeStamp;\n  }\n\n  return proxy;\n} // Minimum delay before invoking the update of observers.\n\n\nvar REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that\n// might affect dimensions of observed elements.\n\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.\n\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\n\nvar ResizeObserverController =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserverController.\r\n   *\r\n   * @private\r\n   */\n  function ResizeObserverController() {\n    /**\r\n     * Indicates whether DOM listeners have been added.\r\n     *\r\n     * @private {boolean}\r\n     */\n    this.connected_ = false;\n    /**\r\n     * Tells that controller has subscribed for Mutation Events.\r\n     *\r\n     * @private {boolean}\r\n     */\n\n    this.mutationEventsAdded_ = false;\n    /**\r\n     * Keeps reference to the instance of MutationObserver.\r\n     *\r\n     * @private {MutationObserver}\r\n     */\n\n    this.mutationsObserver_ = null;\n    /**\r\n     * A list of connected observers.\r\n     *\r\n     * @private {Array<ResizeObserverSPI>}\r\n     */\n\n    this.observers_ = [];\n    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\n    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\n  }\n  /**\r\n   * Adds observer to observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be added.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.addObserver = function (observer) {\n    if (!~this.observers_.indexOf(observer)) {\n      this.observers_.push(observer);\n    } // Add listeners if they haven't been added yet.\n\n\n    if (!this.connected_) {\n      this.connect_();\n    }\n  };\n  /**\r\n   * Removes observer from observers list.\r\n   *\r\n   * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.removeObserver = function (observer) {\n    var observers = this.observers_;\n    var index = observers.indexOf(observer); // Remove observer if it's present in registry.\n\n    if (~index) {\n      observers.splice(index, 1);\n    } // Remove listeners if controller has no connected observers.\n\n\n    if (!observers.length && this.connected_) {\n      this.disconnect_();\n    }\n  };\n  /**\r\n   * Invokes the update of observers. It will continue running updates insofar\r\n   * it detects changes.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.refresh = function () {\n    var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might\n    // be future ones caused by CSS transitions.\n\n    if (changesDetected) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Updates every observer from observers list and notifies them of queued\r\n   * entries.\r\n   *\r\n   * @private\r\n   * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n   *      dimensions of it's elements.\r\n   */\n\n\n  ResizeObserverController.prototype.updateObservers_ = function () {\n    // Collect observers that have active observations.\n    var activeObservers = this.observers_.filter(function (observer) {\n      return observer.gatherActive(), observer.hasActive();\n    }); // Deliver notifications in a separate cycle in order to avoid any\n    // collisions between observers, e.g. when multiple instances of\n    // ResizeObserver are tracking the same element and the callback of one\n    // of them changes content dimensions of the observed target. Sometimes\n    // this may result in notifications being blocked for the rest of observers.\n\n    activeObservers.forEach(function (observer) {\n      return observer.broadcastActive();\n    });\n    return activeObservers.length > 0;\n  };\n  /**\r\n   * Initializes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.connect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already added.\n    if (!isBrowser || this.connected_) {\n      return;\n    } // Subscription to the \"Transitionend\" event is used as a workaround for\n    // delayed transitions. This way it's possible to capture at least the\n    // final state of an element.\n\n\n    document.addEventListener('transitionend', this.onTransitionEnd_);\n    window.addEventListener('resize', this.refresh);\n\n    if (mutationObserverSupported) {\n      this.mutationsObserver_ = new MutationObserver(this.refresh);\n      this.mutationsObserver_.observe(document, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    } else {\n      document.addEventListener('DOMSubtreeModified', this.refresh);\n      this.mutationEventsAdded_ = true;\n    }\n\n    this.connected_ = true;\n  };\n  /**\r\n   * Removes DOM listeners.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.disconnect_ = function () {\n    // Do nothing if running in a non-browser environment or if listeners\n    // have been already removed.\n    if (!isBrowser || !this.connected_) {\n      return;\n    }\n\n    document.removeEventListener('transitionend', this.onTransitionEnd_);\n    window.removeEventListener('resize', this.refresh);\n\n    if (this.mutationsObserver_) {\n      this.mutationsObserver_.disconnect();\n    }\n\n    if (this.mutationEventsAdded_) {\n      document.removeEventListener('DOMSubtreeModified', this.refresh);\n    }\n\n    this.mutationsObserver_ = null;\n    this.mutationEventsAdded_ = false;\n    this.connected_ = false;\n  };\n  /**\r\n   * \"Transitionend\" event handler.\r\n   *\r\n   * @private\r\n   * @param {TransitionEvent} event\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\n    var _b = _a.propertyName,\n        propertyName = _b === void 0 ? '' : _b; // Detect whether transition may affect dimensions of an element.\n\n    var isReflowProperty = transitionKeys.some(function (key) {\n      return !!~propertyName.indexOf(key);\n    });\n\n    if (isReflowProperty) {\n      this.refresh();\n    }\n  };\n  /**\r\n   * Returns instance of the ResizeObserverController.\r\n   *\r\n   * @returns {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.getInstance = function () {\n    if (!this.instance_) {\n      this.instance_ = new ResizeObserverController();\n    }\n\n    return this.instance_;\n  };\n  /**\r\n   * Holds reference to the controller's instance.\r\n   *\r\n   * @private {ResizeObserverController}\r\n   */\n\n\n  ResizeObserverController.instance_ = null;\n  return ResizeObserverController;\n}();\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\n\n\nvar defineConfigurable = function defineConfigurable(target, props) {\n  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n    var key = _a[_i];\n    Object.defineProperty(target, key, {\n      value: props[key],\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n  }\n\n  return target;\n};\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\n\n\nvar getWindowOf = function getWindowOf(target) {\n  // Assume that the element is an instance of Node, which means that it\n  // has the \"ownerDocument\" property from which we can retrieve a\n  // corresponding global object.\n  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from\n  // provided element.\n\n  return ownerGlobal || global$1;\n}; // Placeholder of an empty content rectangle.\n\n\nvar emptyRect = createRectInit(0, 0, 0, 0);\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\n\nfunction toFloat(value) {\n  return parseFloat(value) || 0;\n}\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\n\n\nfunction getBordersSize(styles) {\n  var positions = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    positions[_i - 1] = arguments[_i];\n  }\n\n  return positions.reduce(function (size, position) {\n    var value = styles['border-' + position + '-width'];\n    return size + toFloat(value);\n  }, 0);\n}\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\n\n\nfunction getPaddings(styles) {\n  var positions = ['top', 'right', 'bottom', 'left'];\n  var paddings = {};\n\n  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n    var position = positions_1[_i];\n    var value = styles['padding-' + position];\n    paddings[position] = toFloat(value);\n  }\n\n  return paddings;\n}\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getSVGContentRect(target) {\n  var bbox = target.getBBox();\n  return createRectInit(0, 0, bbox.width, bbox.height);\n}\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getHTMLElementContentRect(target) {\n  // Client width & height properties can't be\n  // used exclusively as they provide rounded values.\n  var clientWidth = target.clientWidth,\n      clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and\n  // detached elements. Though elements with width & height properties less\n  // than 0.5 will be discarded as well.\n  //\n  // Without it we would need to implement separate methods for each of\n  // those cases and it's not possible to perform a precise and performance\n  // effective test for hidden elements. E.g. even jQuery's ':visible' filter\n  // gives wrong results for elements with width & height less than 0.5.\n\n  if (!clientWidth && !clientHeight) {\n    return emptyRect;\n  }\n\n  var styles = getWindowOf(target).getComputedStyle(target);\n  var paddings = getPaddings(styles);\n  var horizPad = paddings.left + paddings.right;\n  var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the\n  // only dimensions available to JS that contain non-rounded values. It could\n  // be possible to utilize the getBoundingClientRect if only it's data wasn't\n  // affected by CSS transformations let alone paddings, borders and scroll bars.\n\n  var width = toFloat(styles.width),\n      height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box\n  // model is applied (except for IE).\n\n  if (styles.boxSizing === 'border-box') {\n    // Following conditions are required to handle Internet Explorer which\n    // doesn't include paddings and borders to computed CSS dimensions.\n    //\n    // We can say that if CSS dimensions + paddings are equal to the \"client\"\n    // properties then it's either IE, and thus we don't need to subtract\n    // anything, or an element merely doesn't have paddings/borders styles.\n    if (Math.round(width + horizPad) !== clientWidth) {\n      width -= getBordersSize(styles, 'left', 'right') + horizPad;\n    }\n\n    if (Math.round(height + vertPad) !== clientHeight) {\n      height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\n    }\n  } // Following steps can't be applied to the document's root element as its\n  // client[Width/Height] properties represent viewport area of the window.\n  // Besides, it's as well not necessary as the <html> itself neither has\n  // rendered scroll bars nor it can be clipped.\n\n\n  if (!isDocumentElement(target)) {\n    // In some browsers (only in Firefox, actually) CSS width & height\n    // include scroll bars size which can be removed at this step as scroll\n    // bars are the only difference between rounded dimensions + paddings\n    // and \"client\" properties, though that is not always true in Chrome.\n    var vertScrollbar = Math.round(width + horizPad) - clientWidth;\n    var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of \"client\" properties.\n    // E.g. for an element with content width of 314.2px it sometimes gives\n    // the client width of 315px and for the width of 314.7px it may give\n    // 314px. And it doesn't happen all the time. So just ignore this delta\n    // as a non-relevant.\n\n    if (Math.abs(vertScrollbar) !== 1) {\n      width -= vertScrollbar;\n    }\n\n    if (Math.abs(horizScrollbar) !== 1) {\n      height -= horizScrollbar;\n    }\n  }\n\n  return createRectInit(paddings.left, paddings.top, width, height);\n}\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nvar isSVGGraphicsElement = function () {\n  // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\n  // interface.\n  if (typeof SVGGraphicsElement !== 'undefined') {\n    return function (target) {\n      return target instanceof getWindowOf(target).SVGGraphicsElement;\n    };\n  } // If it's so, then check that element is at least an instance of the\n  // SVGElement and that it has the \"getBBox\" method.\n  // eslint-disable-next-line no-extra-parens\n\n\n  return function (target) {\n    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';\n  };\n}();\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\n\n\nfunction isDocumentElement(target) {\n  return target === getWindowOf(target).document.documentElement;\n}\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction getContentRect(target) {\n  if (!isBrowser) {\n    return emptyRect;\n  }\n\n  if (isSVGGraphicsElement(target)) {\n    return getSVGContentRect(target);\n  }\n\n  return getHTMLElementContentRect(target);\n}\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\n\n\nfunction createReadOnlyRect(_a) {\n  var x = _a.x,\n      y = _a.y,\n      width = _a.width,\n      height = _a.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.\n\n  var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\n  var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.\n\n  defineConfigurable(rect, {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: height + y,\n    left: x\n  });\n  return rect;\n}\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\n\n\nfunction createRectInit(x, y, width, height) {\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n}\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\n\n\nvar ResizeObservation =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObservation.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   */\n  function ResizeObservation(target) {\n    /**\r\n     * Broadcasted width of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n    this.broadcastWidth = 0;\n    /**\r\n     * Broadcasted height of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\n\n    this.broadcastHeight = 0;\n    /**\r\n     * Reference to the last observed content rectangle.\r\n     *\r\n     * @private {DOMRectInit}\r\n     */\n\n    this.contentRect_ = createRectInit(0, 0, 0, 0);\n    this.target = target;\n  }\n  /**\r\n   * Updates content rectangle and tells whether it's width or height properties\r\n   * have changed since the last broadcast.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObservation.prototype.isActive = function () {\n    var rect = getContentRect(this.target);\n    this.contentRect_ = rect;\n    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;\n  };\n  /**\r\n   * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n   * from the corresponding properties of the last observed content rectangle.\r\n   *\r\n   * @returns {DOMRectInit} Last observed content rectangle.\r\n   */\n\n\n  ResizeObservation.prototype.broadcastRect = function () {\n    var rect = this.contentRect_;\n    this.broadcastWidth = rect.width;\n    this.broadcastHeight = rect.height;\n    return rect;\n  };\n\n  return ResizeObservation;\n}();\n\nvar ResizeObserverEntry =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of ResizeObserverEntry.\r\n   *\r\n   * @param {Element} target - Element that is being observed.\r\n   * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n   */\n  function ResizeObserverEntry(target, rectInit) {\n    var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable\n    // and are also not enumerable in the native implementation.\n    //\n    // Property accessors are not being used as they'd require to define a\n    // private WeakMap storage which may cause memory leaks in browsers that\n    // don't support this type of collections.\n\n    defineConfigurable(this, {\n      target: target,\n      contentRect: contentRect\n    });\n  }\n\n  return ResizeObserverEntry;\n}();\n\nvar ResizeObserverSPI =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n   *      when one of the observed elements changes it's content dimensions.\r\n   * @param {ResizeObserverController} controller - Controller instance which\r\n   *      is responsible for the updates of observer.\r\n   * @param {ResizeObserver} callbackCtx - Reference to the public\r\n   *      ResizeObserver instance which will be passed to callback function.\r\n   */\n  function ResizeObserverSPI(callback, controller, callbackCtx) {\n    /**\r\n     * Collection of resize observations that have detected changes in dimensions\r\n     * of elements.\r\n     *\r\n     * @private {Array<ResizeObservation>}\r\n     */\n    this.activeObservations_ = [];\n    /**\r\n     * Registry of the ResizeObservation instances.\r\n     *\r\n     * @private {Map<Element, ResizeObservation>}\r\n     */\n\n    this.observations_ = new MapShim();\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('The callback provided as parameter 1 is not a function.');\n    }\n\n    this.callback_ = callback;\n    this.controller_ = controller;\n    this.callbackCtx_ = callbackCtx;\n  }\n  /**\r\n   * Starts observing provided element.\r\n   *\r\n   * @param {Element} target - Element to be observed.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.observe = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is already being observed.\n\n    if (observations.has(target)) {\n      return;\n    }\n\n    observations.set(target, new ResizeObservation(target));\n    this.controller_.addObserver(this); // Force the update of observations.\n\n    this.controller_.refresh();\n  };\n  /**\r\n   * Stops observing provided element.\r\n   *\r\n   * @param {Element} target - Element to stop observing.\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.unobserve = function (target) {\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    } // Do nothing if current environment doesn't have the Element interface.\n\n\n    if (typeof Element === 'undefined' || !(Element instanceof Object)) {\n      return;\n    }\n\n    if (!(target instanceof getWindowOf(target).Element)) {\n      throw new TypeError('parameter 1 is not of type \"Element\".');\n    }\n\n    var observations = this.observations_; // Do nothing if element is not being observed.\n\n    if (!observations.has(target)) {\n      return;\n    }\n\n    observations.delete(target);\n\n    if (!observations.size) {\n      this.controller_.removeObserver(this);\n    }\n  };\n  /**\r\n   * Stops observing all elements.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.disconnect = function () {\n    this.clearActive();\n    this.observations_.clear();\n    this.controller_.removeObserver(this);\n  };\n  /**\r\n   * Collects observation instances the associated element of which has changed\r\n   * it's content rectangle.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.gatherActive = function () {\n    var _this = this;\n\n    this.clearActive();\n    this.observations_.forEach(function (observation) {\n      if (observation.isActive()) {\n        _this.activeObservations_.push(observation);\n      }\n    });\n  };\n  /**\r\n   * Invokes initial callback function with a list of ResizeObserverEntry\r\n   * instances collected from active resize observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.broadcastActive = function () {\n    // Do nothing if observer doesn't have active observations.\n    if (!this.hasActive()) {\n      return;\n    }\n\n    var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.\n\n    var entries = this.activeObservations_.map(function (observation) {\n      return new ResizeObserverEntry(observation.target, observation.broadcastRect());\n    });\n    this.callback_.call(ctx, entries, ctx);\n    this.clearActive();\n  };\n  /**\r\n   * Clears the collection of active observations.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ResizeObserverSPI.prototype.clearActive = function () {\n    this.activeObservations_.splice(0);\n  };\n  /**\r\n   * Tells whether observer has active observations.\r\n   *\r\n   * @returns {boolean}\r\n   */\n\n\n  ResizeObserverSPI.prototype.hasActive = function () {\n    return this.activeObservations_.length > 0;\n  };\n\n  return ResizeObserverSPI;\n}(); // Registry of internal observers. If WeakMap is not available use current shim\n// for the Map collection as it has all required methods and because WeakMap\n// can't be fully polyfilled anyway.\n\n\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\n\nvar ResizeObserver =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of ResizeObserver.\r\n   *\r\n   * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n   *      dimensions of the observed elements change.\r\n   */\n  function ResizeObserver(callback) {\n    if (!(this instanceof ResizeObserver)) {\n      throw new TypeError('Cannot call a class as a function.');\n    }\n\n    if (!arguments.length) {\n      throw new TypeError('1 argument required, but only 0 present.');\n    }\n\n    var controller = ResizeObserverController.getInstance();\n    var observer = new ResizeObserverSPI(callback, controller, this);\n    observers.set(this, observer);\n  }\n\n  return ResizeObserver;\n}(); // Expose public methods of ResizeObserver.\n\n\n['observe', 'unobserve', 'disconnect'].forEach(function (method) {\n  ResizeObserver.prototype[method] = function () {\n    var _a;\n\n    return (_a = observers.get(this))[method].apply(_a, arguments);\n  };\n});\n\nvar index = function () {\n  // Export existing implementation if available.\n  if (typeof global$1.ResizeObserver !== 'undefined') {\n    return global$1.ResizeObserver;\n  }\n\n  return ResizeObserver;\n}();\n\nexport default index;"],"sourceRoot":""}